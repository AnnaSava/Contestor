@page "/contest/{Id}/vote"
@using Contestor.Data.Contract.Models
@using Contestor.Service.Contract
@using System.Security.Claims
@inject IContestService contestService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider authProvider

<h3>Contest @obj.Title - голосование</h3>


@if (Works is null)
{
    <p><em>Загрузка... !</em></p>
}
else
{
    <table class="table">
        @foreach (var work in Works)
        {
            <tr>
                <td>@work.Title</td>
                <td>
                    @if(work.VisitorIsAuthor)
                    {
                        <span>Вы автор этой работы</span>
                    }
                    else if (work.VisitorHasVoted)
                    {
                        <span>Вы уже проголосовали</span>
                    }
                    else
                    {
                    <input type="button" class="btn btn-primary" @onclick="() => VoteForWork(work)" value="Проголосовать" />
                    }
                </td>
            </tr>
        }
    </table>
}


@code {
    [Parameter]
    public string Id { get; set; }
    ContestModel obj = new ContestModel();

    IEnumerable<WorkForVoteViewModel> Works = new List<WorkForVoteViewModel>();

    public long UserId;

    protected override async Task OnInitializedAsync()
    {
        var authstate = await authProvider.GetAuthenticationStateAsync();
        var user = authstate.User;

        UserId = long.Parse(user.FindFirst(ClaimTypes.NameIdentifier).Value);

        obj = await Task.Run(() => contestService.GetOne(Convert.ToInt64(Id)));
        Works = await contestService.GetAllWorks(long.Parse(Id), UserId);
    }

    protected async void VoteForWork(WorkForVoteViewModel work)
    {
        //var authstate = await authProvider.GetAuthenticationStateAsync();
        //var user = authstate.User;

        //var id = long.Parse(user.FindFirst(ClaimTypes.NameIdentifier).Value);

        await contestService.Vote(UserId, work.Id);

        work.VisitorHasVoted = true;
        StateHasChanged();
    }
}
