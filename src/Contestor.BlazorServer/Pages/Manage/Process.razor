@page "/manage/contest/process/{Id}"
@using Contestor.Data.Contract
@using Contestor.Service.Contract
@inject IContestService contestService
@inject NavigationManager NavigationManager

<h3>@obj.Title - управление</h3>

@if (obj.Status == ContestStatus.Draft)
{
    <form>
        <input type="button" class="btn btn-primary" @onclick="@StartContestProcess" value="Начать конкурс" />
    </form>
}

@if (obj.Tasks != null && obj.Tasks.Count() > 0)
{
    foreach (var task in obj.Tasks)
    {
        foreach (var action in task.AvailableActions)
        {
            <input type="button" class="btn btn-primary" @onclick="() => ExecTaskAction(task.Id, action.Key)" value="@action.Value" />
        }
    }
}

@if(WorksWithScore?.Count() > 0)
{
<table class="table">
    @foreach(var work in WorksWithScore)
    {
        <tr>
            <td>@work.Work.Title</td>
            <td>@work.Score</td>
        </tr>
    }
</table>
}

@code {
        [Parameter]
        public string Id { get; set; }
        ContestManageViewModel obj = new ContestManageViewModel();

        IEnumerable<WorkWithScoreModel> WorksWithScore = new List<WorkWithScoreModel>();

protected override async Task OnInitializedAsync()
    {
        obj = await Task.Run(() => contestService.GetOneForManage(Convert.ToInt64(Id)));

        WorksWithScore = await contestService.GetTopVotedWorks(long.Parse(Id));
    }

    protected async void StartContestProcess()
    {
        await contestService.StartContestProcess(obj.Id);
        NavigationManager.NavigateTo("/manage/contest");
    }

    protected async void ExecTaskAction(string taskId, int actionId)
    {
        var model = new CompletingTaskViewModel
        {
            ActionId = actionId,
            TaskId = taskId
        };

        await contestService.CompleteTask(model);
    }
}
