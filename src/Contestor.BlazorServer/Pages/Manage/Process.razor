@page "/manage/contest/process/{Id}"
@using Contestor.Data.Contract
@using Contestor.Service.Contract
@inject IContestService contestService
@inject NavigationManager NavigationManager
@inject AppConfig appConfig;

<h3>@Contest.Title - управление</h3>
<h4>Status: @Contest.Status</h4>
<hr />

<AuthorizeView>
    <Authorized>
        @if (Contest.Status == ContestStatus.Draft)
        {
            <form>
                <input type="button" class="btn btn-primary" @onclick="@StartContestProcess" value="Начать конкурс" />
            </form>
        }

        @if (Contest.Tasks != null && Contest.Tasks.Count() > 0)
        {
            foreach (var task in Contest.Tasks)
            {
                <p>@task.Name</p>
                foreach (var action in task.AvailableActions)
                {
                    <input type="button" class="btn btn-primary" @onclick="() => ExecTaskAction(task.Id, action.Key)" value="@action.Value" />
                }
                <hr />
            }
        }

        <h4>Участники</h4>
        @if (Participants?.Count() > 0)
        {
            <table class="table">
                <tr>
                    <th>Ид пользователя</th>
                    <th>Отображаемое имя</th>
                    <th>Количество работ</th>
                </tr>

                @foreach (var participant in Participants)
                {
                    <tr>
                        <td>@participant.UserId</td>
                        <td>@participant.DisplayName</td>
                        <td>@participant.WorksCount</td>
                    </tr>
                }
            </table>
        }

        <h4>Работы</h4>
        @if(Works?.Count() > 0)
        {
            <table class="table">
                <tr>
                    <th>Ид работы</th>
                    <th>Ид пользователя</th>
                    <th>Заголовок</th>
                </tr>
                @foreach(var work in Works)
            {
            <tr>
                <td>@work.Id</td>
                <td>@work.ParticipantId</td>
                <td>@work.Title</td>
            </tr>
            }
            </table>
        }

        <h4>Работы с голосами</h4>
        @if (WorksWithScore?.Count() > 0)
        {
            <table class="table">
                @foreach (var work in WorksWithScore)
                {
                    <tr>
                        <td>@work.Work.Title</td>
                        <td>@work.Score</td>
                        <td>
                            @if(Contest.Status == ContestStatus.WaitingWinner)
                        {

                        }
                        </td>
                    </tr>
                }
            </table>
        }
    </Authorized>
</AuthorizeView>

@code {
        [Parameter]
        public string Id { get; set; }
        ContestManageViewModel Contest = new ContestManageViewModel();

        IEnumerable<ParticipantModel> Participants = new List<ParticipantModel>();

        IEnumerable<WorkModel> Works = new List<WorkModel>();

        IEnumerable<WorkWithScoreModel> WorksWithScore = new List<WorkWithScoreModel>();

    protected override async Task OnInitializedAsync()
    {
        Contest = await Task.Run(() => contestService.GetOneForManage(Convert.ToInt64(Id)));

        Participants = await contestService.GetAllParticipants(long.Parse(Id));
        Works = await contestService.GetAllWorks(long.Parse(Id));

        WorksWithScore = await contestService.GetTopVotedWorks(long.Parse(Id));
    }

    protected async void StartContestProcess()
    {
        await contestService.StartContestProcess(Contest.Id, appConfig.ApiUrl);
        NavigationManager.NavigateTo("/manage/contest");
    }

    protected async void ExecTaskAction(string taskId, int actionId)
    {
        var model = new CompletingTaskViewModel
        {
            ActionId = actionId,
            TaskId = taskId
        };

        var ok = await contestService.CompleteTask(model);

        if (ok)
        {
            Contest.Tasks.Remove(Contest.Tasks.First(m => m.Id == taskId));
            StateHasChanged();
        }
    }
}
